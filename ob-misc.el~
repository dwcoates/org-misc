(defun org-goto-src-headers ()
  "Move point to the first header of the source block currently containing point"
  (interactive)
  (org-babel-goto-src-block-head)
  (beginning-of-line)
  (unless (re-search-forward "#\\+begin_src[ ]+?" (line-end-position))
    (error "Error: Couldn't find source header. This shouldn't happen")))

(defun org-get-src-headers ()
  (interactive)
  (save-excursion
    (org-goto-src-headers)
    (buffer-substring-no-properties (point) (line-end-position))))

(defun org-propertize-header-name (header-element)
  (if (string-match ":[[[:alnum:]-*]]*" header-element)
      (propertize (concat header-element " ") 'face '(:foreground "green"))
    header-element))

(defun org-edit-src-headers (headers)
  (interactive (list
                (let ((minibuffer-allow-text-properties t))
                  (read-from-minibuffer
                   "Block headers: "
                   (mapconcat 'org-propertize-header-name
                              (split-string (org-get-src-headers) "[ ]+")
                              " ")
                   ))))
  (save-excursion
    (org-goto-src-headers)
    (delete-region (point) (line-end-position))
    (insert headers))
  )

(defun org-show-headers ()
  "throwaway"
  (interactive)
  (message (propertize "Source Headers: %s" '(:foreground "green") nil)
           (mapconcat 'org-propertize-header-name
                      (split-string (org-get-src-headers) "[ ]+")
                      " ")))
